#!/bin/sh

# 设置变量
Program_path=$(uci get navidrome.config.Program_path)
download_path="/tmp/navidrome/download"
extraction_path="/tmp/navidrome/extraction"
lock_file="/tmp/navidrome/update.lock"

# 从GitHub获取最新发布版的版本号
get_latest_version() {
    local latest_version
    latest_version=$(curl --connect-timeout 30 -sL https://api.github.com/repos/navidrome/navidrome/releases/latest | grep -o '"tag_name": "[^"]*' | grep -o '[^"]*$' | sed 's/^v//')

    # 检查获取版本的命令是否成功
    if [ $? -ne 0 ] || [ -z "$latest_version" ]; then
        logger -p daemon.error -t "navidrome[${$}]" "获取最新版本号失败"
        return 1
    fi

    echo "$latest_version"
}

# 获取本地文件的版本号
get_local_version() {
	if [ -x "$Program_path" ]; then
		local_version=$(${Program_path} -v | awk '{print $1}')
		echo "$local_version"
	else
		echo "0.0.0"  # 如果本地文件不存在
	fi
}

# 下载最新版的Navidrome到临时目录
download() {
	Archt="$(uname -m)"
	case $Archt in
		"x86_64" | "amd64")
			Arch="amd64"
			;;
		"aarch64" | "arm64")
			Arch="arm64"
			;;
		"armv7l" | "armv7")
			Arch="armv7"
			;;
		"armv6l" | "armv6")
			Arch="armv6"
			;;
		"armv5l" | "armv5")
			Arch="armv5"
			;;
		"i386" | "i486" | "i586" | "i686")
			Arch="386"
			;;
		*)
			logger -p daemon.error -t "navidrome[${$}]" "无法判断核心类型"
			EXIT 1
			;;
	esac

	download_url="https://github.com/navidrome/navidrome/releases/download/v${latest_version}/navidrome_${latest_version}_linux_${Arch}.tar.gz"

	logger -p daemon.info -t "navidrome[${$}]" "正在下载 Navidrome $latest_version 到 $download_path..."
	mkdir -p "$download_path"
	curl -L --connect-timeout 30 "$download_url" -o "$download_path/navidrome_${latest_version}_linux_amd64.tar.gz" >/dev/null 2>&1

	local RETVAL=$?
	if [ $RETVAL -ne 0 ]; then
		logger -p daemon.error -t "navidrome[${$}]" "二进制文件下载失败，请手动更新核心文件，即将退出"
		rm -rf "$download_path" "$lock_file"
		return $RETVAL
	else
		logger -p daemon.info -t "navidrome[${$}]" "下载完成"
	fi
}

# 解压下载的 Navidrome
unzip() {
	logger -p daemon.info -t "navidrome[${$}]" "解压到 $Program_path..."
	mkdir -p "$extraction_path"
	mkdir -p "$(dirname "$Program_path")"
	tar -xz -C "$extraction_path" -f "$download_path/navidrome_${latest_version}_linux_amd64.tar.gz"
	local RETVAL=$?
	if [ $RETVAL -ne 0 ]; then
		logger -p daemon.error -t "navidrome[${$}]" "二进制文件解压缩失败，请手动更新核心文件，即将退出!"
	else
		logger -p daemon.info -t "navidrome[${$}]" "Navidrome $latest_version 更新完成!"
		/etc/init.d/navidrome stop
		sleep 1
		mv "$extraction_path/navidrome" "$Program_path"
		/etc/init.d/navidrome start
	fi
	# 清理：删除临时下载和解压目录
	rm -rf "$download_path" "$extraction_path" "$lock_file"
	return $RETVAL
}

# 更新二进制文件
update() {
	local_version=$(get_local_version) && latest_version=$(get_latest_version) && (
		if [ "$local_version" == "$latest_version" ]; then
			logger -p daemon.info -t "navidrome[${$}]" "本地文件已经是最新版本 ($local_version)，无需更新"
			return 2
		else
			logger -p daemon.info -t "navidrome[${$}]" "update ($local_version -> $latest_version)"
			download && unzip
		fi
    )# &
}

if [ "$1" == "update" ]; then
	[ -e "$lock_file" ] && logger -p daemon.info -t "navidrome[${$}]" "更新正在进行中，无需启动新的更新任务。" && exit 0
	touch "$lock_file"
	update
fi

rm -f "$lock_file"
