#!/bin/sh /etc/rc.common

START=99
STOP=90
USE_PROCD=1

child_pid="/var/run/navidrome.pid"
config_file="/etc/navidrome/navidrome.toml"

get_config() {
    config_load navidrome
    config_get Enable 'config' 'Enable'

    modify_config "MusicFolder"
	modify_config "DataFolder"
	modify_config "CacheFolder"
	modify_config "ScanSchedule"
	modify_config "ImageCacheSize"
	modify_config "TranscodingCacheSize"
	modify_config "Address"
	modify_config "Port"
	modify_config "LogLevel"
	if [ -z "$Enable" ] || [ "$Enable" -eq 0 ]; then
		echo "Navidrome is not enabled. Exiting..."
		return 1
	fi
	if [ ! "$(ls -A $DataFolder)" ]; then
        echo "DataFolder is empty. Exiting..."
        exit 1
    fi

	return 0
}

modify_config() {
    local config_name="$1"
    local config_value=$(uci get navidrome.config."$config_name")

    # 删除旧的配置项
    sed -i "/^$config_name /d" "$config_file"

    # 写入新的配置项
    echo "$config_name = '$config_value'" >> "$config_file"
}

start_service() {
	procd_open_instance
	get_config
	if [ $? -eq 0 ];then
		# 下载二进制文件
		/usr/libexec/navidrome-call download
		[ $? -ne 0 ] && procd_close_instance && return
		# 启动 navidrome
		procd_set_param command /usr/share/navidrome/navidrome --configfile "/etc/navidrome/navidrome.toml" > /dev/null 2>&1
		# 记录进程 PID
		echo $! > $child_pid
		echo "Started navidrome process."
	fi
	procd_close_instance
}

stop_service() {
    [ -f "$child_pid" ] && parent_pid=$(cat $child_pid)
    [ -n "$parent_pid" ] && {
        child_pids=$(pgrep -P $parent_pid)
        echo "Terminating child processes of navidrome..."
        for child_pid in $child_pids; do
            kill $child_pid
        done
    }
    echo "Terminating navidrome process..."
}

reload_service() {
	stop
	sleep 1
	start
}

service_triggers() {
	procd_add_reload_trigger navidrome
}

