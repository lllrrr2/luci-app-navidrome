#!/bin/sh /etc/rc.common

START=99
STOP=90
USE_PROCD=1

child_pid_path="/var/run/navidrome.pid"
log_pid_path="/var/run/navidrome-call-log.pid"
update_pid_path="/var/run/navidrome-call-update.pid"
config_path="/etc/navidrome/navidrome.toml"
log_path="/tmp/navidrome/navidrome.log"
mkdir -p "$(dirname "$log_path")"

get_config() {
	config_load navidrome
	config_get Enable 'config' 'Enable'
	config_get Program_path 'config' 'Program_path'
	config_get MusicFolder 'config' 'MusicFolder'
	config_get DataFolder 'config' 'DataFolder'
	config_get CacheFolder 'config' 'CacheFolder'
	config_get ScanSchedule 'config' 'ScanSchedule'
	config_get ImageCacheSize 'config' 'ImageCacheSize'
	config_get TranscodingCacheSize 'config' 'TranscodingCacheSize'
	config_get Address 'config' 'Address'
	config_get Port 'config' 'Port'
	config_get LogLevel 'config' 'LogLevel'

	modify_config "MusicFolder"
	modify_config "DataFolder"
	modify_config "CacheFolder"
	modify_config "ScanSchedule"
	modify_config "ImageCacheSize"
	modify_config "TranscodingCacheSize"
	modify_config "Address"
	modify_config "Port"
	modify_config "LogLevel"
	if [ -z "$Enable" ] || [ "$Enable" -eq 0 ]; then
		echo "Navidrome is not enabled. Exiting..."
		return 1
	fi
	if [ ! -d "$DataFolder" ]; then
		echo "`date "+%Y-%m-%d %H:%M:%S"` 【error】${DataFolder} is empty. Exiting..." >> $log_path
		return 1
	fi
	return 0
}

modify_config() {
	local config_name="$1"
	local config_value
	eval "config_value=\$$config_name"
	[ -z "$config_value" ] && return

	# 删除旧的配置项
	sed -i "/^$config_name /d" "$config_path"

	# 写入新的配置项
	echo "$config_name = \"$config_value\"" >> "$config_path"
}

start_service() {
	procd_open_instance
	if get_config; then
		if [ -f "$Program_path" ];then
			# 启动 navidrome
			procd_set_param command sh -c "${Program_path} --configfile ${config_path} >> $log_path 2>&1"
			# 记录进程 PID
			echo $! > $child_pid_path
			echo "Started navidrome process."
		else
			procd_set_param command sh -c "/usr/libexec/navidrome-call update"
		fi
	fi
	procd_close_instance
}

stop_service() {
    [ -f "$log_pid_path" ] && parent_pid=$(cat $log_pid_path)
    [ -n "$parent_pid" ] && {
        child_pids=$(pgrep -P $parent_pid)
        kill $parent_pid
        for child_pid in $child_pids; do
            kill $child_pid
        done
        rm -f $log_pid_path
        echo "Log truncation process stopped"
    }
}

reload_service() {
	stop
	sleep 1
	start
}

service_triggers() {
	procd_add_reload_trigger navidrome
}

if get_config; then
	[ -f "$Program_path" ] && /usr/libexec/navidrome-call log_truncate
fi
